#ifndef _EXPRESSION
#define _EXPRESSION

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "scanner.h"
#include "stack.h"
#include "parser.h"
#include "error.h"
#include "bst.h"

#define STACK_INIT_SIZE 977

static char table[15][15] = {
    //0    1    2    3    4    5    6    7    8    9    10   11   12  13   14
   // +    -    *    /   ===  !==   <    >   <=  >=     (    )    i    $    .
    {'>', '>', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '>'}, // + 0
    {'>', '>', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '>'}, // - 1
    {'>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '>'}, // * 2
    {'>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '>'}, // / 3
    {'<', '<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '<'}, // === 4
    {'<', '<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '<'}, // !== 5
    {'<', '<', '<', '<', 'X', 'X', 'X', 'X', 'X', 'X', '<', '>', '<', '>', '<'}, // < 6
    {'<', '<', '<', '<', 'X', 'X', 'X', 'X', 'X', 'X', '<', '>', '<', '>', '<'}, // > 7
    {'<', '<', '<', '<', 'X', 'X', 'X', 'X', 'X', 'X', '<', '>', '<', '>', '<'}, // <= 8
    {'<', '<', '<', '<', 'X', 'X', 'X', 'X', 'X', 'X', '<', '>', '<', '>', '<'}, // >= 9
    {'<', '<', '<', '<', '<', '<', '<', '<', '<', '<', '<', '=', '<', 'X', '<'}, // ( 10
    {'>', '>', '>', '>', '>', '>', '>', '>', '>', '>', 'X', '>', 'X', '>', '>'}, // ) 11
    {'>', '>', '>', '>', '>', '>', '>', '>', '>', '>', 'X', '>', 'X', '>', '>'}, // i 12
    {'<', '<', '<', '<', '<', '<', '<', '<', '<', '<', '<', 'X', '<', 'A', '<'}, // $ 13    TOPNONTERM
    {'>', '>', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>', '>'}  // . 14
};

int parseExpression(int endChar, int *resDataType, node_t symTable);

#endif